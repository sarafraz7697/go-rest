# 🛒 E-Commerce API

A clean and scalable REST API built with **Go (Golang)** and the **Fiber** framework. It follows best practices, including **layered architecture**, **JWT authentication**, **role-based access control (RBAC)**, and **MongoDB** as the database.

---

## ✨ Features

- **User Authentication** – Register, login, and update profiles
- **Role-Based Access Control (RBAC)** – Restrict routes based on user roles
- **Product Management** – Full **CRUD** (Create, Read, Update, Delete) operations
- **Validation Middleware** – DTO validation with `go-playground/validator`
- **JWT Authentication** – Secure authentication using JWT tokens
- **MongoDB Integration** – Store data securely in MongoDB
- **Dependency Injection** – Organized structure for services, repositories, and controllers

---

## 🚀 Installation

### Prerequisites

- **Go** `1.18+`
- **MongoDB** installed and running

### 1️⃣ Clone the Repository

```sh
git clone https://github.com/your-repo/ecommerce-api.git
cd ecommerce-api
```

### 2️⃣ Install Dependencies

```sh
go mod tidy
```

### 3️⃣ Configure Environment Variables

Create a `.env` file in the project root with the following content:

```env
PORT=8080
SECRET_KEY=mysecretkey

DB_HOST=localhost
DB_USER=admin
DB_PASS=12345
DB_PORT=27017
DB_NAME=ecommerce
```

### 4️⃣ Run the Application

```sh
go run main.go
```

---

## 📁 Project Structure

```
├── config/         # Database connection & environment config
├── controllers/    # Route handlers (business logic)
├── middlewares/    # Authentication, validation, and RBAC
├── models/         # Database models (MongoDB schemas)
├── repository/     # Database queries and interactions
├── routes/         # API route definitions
├── services/       # Business logic layer
├── utils/          # Utility functions (JWT, validation, etc.)
├── dtos/           # Data transfer objects for requests
├── main.go         # Application entry point
└── go.mod          # Dependencies
```

---

## 📌 API Endpoints

### 🔑 Authentication Routes

| Method | Endpoint         | Description         | Auth Required |
| ------ | ---------------- | ------------------- | ------------- |
| POST   | `/auth/register` | Register a new user | ❌ No         |
| POST   | `/auth/login`    | Authenticate user   | ❌ No         |
| PUT    | `/auth/profile`  | Update user profile | ✅ Yes        |

### 🛍 Product Routes

| Method | Endpoint       | Description            | Auth Required | Role  |
| ------ | -------------- | ---------------------- | ------------- | ----- |
| POST   | `/product`     | Create a new product   | ✅ Yes        | Admin |
| GET    | `/product`     | Get all products       | ✅ Yes        | Any   |
| GET    | `/product/:id` | Get product by ID      | ✅ Yes        | Any   |
| PUT    | `/product/:id` | Update product details | ✅ Yes        | Admin |
| DELETE | `/product/:id` | Delete a product       | ✅ Yes        | Admin |

---

## 🛠 Technologies Used

- **[Go Fiber](https://gofiber.io/)** – Web framework
- **[MongoDB](https://www.mongodb.com/)** – NoSQL database
- **[JWT](https://jwt.io/)** – JSON Web Token authentication
- **[go-playground/validator](https://github.com/go-playground/validator)** – DTO validation middleware

---

## 🐳 Running with Docker

Set up MongoDB using Docker:

```sh
docker run --name mongodb -d -p 27017:27017 \
  -e MONGO_INITDB_ROOT_USERNAME=admin \
  -e MONGO_INITDB_ROOT_PASSWORD=12345 \
  mongo
```

---

## 📜 License

This project is licensed under the **MIT License**.
