# E-Commerce API

This is a clean and scalable REST API built with Go (Golang) and Fiber framework. It follows best practices, including layered architecture, JWT authentication, role-based access control, and MongoDB as the database.

## Features

- **User Authentication**: Register, login, and edit profile
- **Role-Based Access Control (RBAC)**: Protect routes based on user roles
- **CRUD Operations**: Products management (Create, Read, Update, Delete)
- **Validation Middleware**: DTO validation with `go-playground/validator`
- **JWT Authentication**: Secure authentication using JWT tokens
- **MongoDB Integration**: Store data securely using MongoDB
- **Dependency Injection**: Organized structure for services, repositories, and controllers

## Installation

### Prerequisites

- Go 1.18+
- MongoDB

### Clone the Repository

```sh
git clone https://github.com/your-repo/ecommerce-api.git
cd ecommerce-api
```

### Install Dependencies

```sh
go mod tidy
```

### Environment Variables

Create a `.env` file in the project root with the following content:

```env
PORT=8080
SECRET_KEY=mysecretkey

DB_HOST=localhost
DB_USER=admin
DB_PASS=12345
DB_PORT=27017
DB_NAME=ecommerce
```

### Run the Application

```sh
go run main.go
```

## Project Structure

```
├── config/         # Database connection and environment config
├── controllers/    # Route handlers (business logic)
├── middlewares/    # Authentication, validation, and role-based access
├── models/         # Database models (MongoDB schemas)
├── repository/     # Database queries and interactions
├── routes/         # API route definitions
├── services/       # Business logic layer
├── utils/          # Utility functions (JWT, validation, etc.)
├── dtos/           # Request data transfer objects
├── main.go         # Application entry point
└── go.mod          # Dependencies
```

## API Endpoints

### Authentication Routes

| Method | Endpoint         | Description         | Auth Required |
| ------ | ---------------- | ------------------- | ------------- |
| POST   | `/auth/register` | Register a new user | ❌ No         |
| POST   | `/auth/login`    | Authenticate user   | ❌ No         |
| PUT    | `/auth/profile`  | Update user profile | ✅ Yes        |

### Product Routes

| Method | Endpoint       | Description            | Auth Required | Role  |
| ------ | -------------- | ---------------------- | ------------- | ----- |
| POST   | `/product`     | Create a new product   | ✅ Yes        | Admin |
| GET    | `/product`     | Get all products       | ✅ Yes        | Any   |
| GET    | `/product/:id` | Get product by ID      | ✅ Yes        | Any   |
| PUT    | `/product/:id` | Update product details | ✅ Yes        | Admin |
| DELETE | `/product/:id` | Delete a product       | ✅ Yes        | Admin |

## Technologies Used

- **Go Fiber** - Web framework
- **MongoDB** - NoSQL database
- **JWT** - JSON Web Token for authentication
- **Validator** - DTO validation middleware

## Running with Docker

You can use Docker to set up MongoDB quickly:

```sh
docker run --name mongodb -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=12345 mongo
```

## License

This project is licensed under the MIT License.
